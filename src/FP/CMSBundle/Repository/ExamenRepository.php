<?php

namespace FP\CMSBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * ExamenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExamenRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getexamens()
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT c.numeroconsultation, te.nomTypeExamen, 
                    c.id AS  'idconsultation', te.id AS  'idtypeexamen', 
                    ct.consultation_id, ct.type_examen_id, ct.actif
                    FROM consultation c, type_examen te, consultation_type_examen ct
                    WHERE c.id = ct.consultation_id
                    AND te.id = ct.type_examen_id
                    AND NOT 
                    EXISTS (
                    SELECT * 
                    FROM examen e
                    WHERE ct.type_examen_id = e.typeexamen_id
                    AND ct.consultation_id = e.consultation_id
                    )
      ");
//        $statement->bindValue('id', $iduser);
        $statement->execute();
        $examens = $statement->fetchAll();

        return $examens;

    }

    public function getexamensByConsult()
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT DISTINCT c.numeroconsultation, ct.actif
                    FROM consultation c, type_examen te, consultation_type_examen ct
                    WHERE c.id = ct.consultation_id
                    AND te.id = ct.type_examen_id
                    AND NOT 
                    EXISTS (
                    SELECT * 
                    FROM examen e
                    WHERE ct.type_examen_id = e.typeexamen_id
                    AND ct.consultation_id = e.consultation_id
                    )
      ");
//        $statement->bindValue('id', $iduser);
        $statement->execute();
        $examens = $statement->fetchAll();

        return $examens;

    }

    public function getexamensActifByConsult()
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT DISTINCT c.numeroconsultation, ct.actif
                    FROM consultation c, type_examen te, consultation_type_examen ct
                    WHERE c.id = ct.consultation_id
                    AND te.id = ct.type_examen_id
                    AND ct.actif IS NOT NULL
                    AND NOT 
                    EXISTS (
                    SELECT * 
                    FROM examen e
                    WHERE ct.type_examen_id = e.typeexamen_id
                    AND ct.consultation_id = e.consultation_id
                    )
      ");
//        $statement->bindValue('id', $iduser);
        $statement->execute();
        $examens = $statement->fetchAll();

        return $examens;

    }


    public function getHistoriqueExamenByConsult()
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT DISTINCT e.consultation_id
                    FROM examen e
      ");
//        $statement->bindValue('id', $iduser);
        $statement->execute();
        $examens = $statement->fetchAll();

        return $examens;

    }


    public function getHistoriqueExamenByConsultForPatient($patientid)
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT DISTINCT e.consultation_id
                    FROM examen e, patient p
                    WHERE e.patient_id = :patientid
      ");
        $statement->bindValue('patientid', $patientid);
        $statement->execute();
        $examens = $statement->fetchAll();

        return $examens;

    }

    public function getTypeExamIdByIdConsult($idconsult)
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT DISTINCT e.id, e.consultation_id, e.typeexamen_id, c.numeroconsultation, te.nomTypeExamen, e.date_ajout,
                    p.nom_patient, p.prenom_patient, p.genre_patient, DATEDIFF(NOW(), p.date_naiss)/365  AS age
                    FROM examen e, consultation c, type_examen te, patient p 
                    WHERE e.consultation_id = c.id
                    AND e.typeexamen_id = te.id
                    AND c.patient_id = p.id
                    GROUP BY e.consultation_id, e.typeexamen_id
                    having e.consultation_id = :idconsult
      ");
        $statement->bindValue('idconsult', $idconsult);
        $statement->execute();
        $examens = $statement->fetchAll();

        return $examens;

    }

    /**
     * @return mixed
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function nombreTotalExamen()
    {
//        return DB::table('orders')->where('id', DB::raw("(select max(`id`) from orders)"))->get();
        $qb = $this->_em->createQueryBuilder();
        $nbexamens = $this->_em->createQueryBuilder()->select('Count(e.id)')
            ->from('FPCMSBundle:Examen', 'e')
            ->where('e.typeexamen != 16')
            ->getQuery()
            ->getSingleScalarResult();

        $nbexamensnfs = $this->_em->createQueryBuilder()->select('Count(a.id)')
            ->from('FPCMSBundle:Examen', 'a')
            ->where('a.typeexamen = :te', 'a.champstypeexam = :champ')
            ->setParameter('te', 16)
            ->setParameter('champ', 16)
            ->getQuery()
            ->getSingleScalarResult();

        $nbexamtotal = (int)$nbexamens + (int)$nbexamensnfs;
        return (int)$nbexamtotal;
    }

    /**
     * @return int
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function nbpatientexamen()
    {
        $nbpatientexam = $this->_em->createQueryBuilder()->select('COUNT(DISTINCT e.patient)')
            ->from('FPCMSBundle:Examen', 'e')
            ->getQuery()
            ->getSingleScalarResult();

        return (int)$nbpatientexam;
    }

    public function getnbExamenByPeriodandUser($iduser)
    {
        $cnx = $this->_em->getConnection();
        $datedebut = new \DateTime('2018-01-01 00:00:00');
        $today = new \DateTime('now');
        $onewweek = new \DateTime('2018-01-01 00:00:00');
        $du = $datedebut;
        $au = $onewweek->modify('+1 week');
        $data = [];
        $i = 0;
        while ($au < $today) {
            $i = $i + 1;
            $nbexam = $this->_em->createQueryBuilder()
                ->select('Count(e.id)')
                ->from('FPCMSBundle:Examen', 'e')
                ->leftJoin('e.utilisateur', 'u')
                ->where('u.id = :medecin_id', 'e.dateAjout > :du')
                ->andWhere(':au > e.dateAjout')
                ->setParameter('medecin_id', $iduser)
                ->setParameter('du', $du)
                ->setParameter('au', $au)
                ->getQuery()
                ->getSingleScalarResult();
            $object = new \stdClass();
            $object->period = $au->format('Y') . ' W' . $au->format('W');
            $object->examen = (int)$nbexam;
            $object->labo = true;
            $data[] = $object;

            $du = $du->modify('+1 week');
            $au = $au->modify('+1 week');
        }
        return $data;

    }


    public function groupconsul()
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare("
                    SELECT DISTINCT ct.consultation_id
                    FROM consultation_type_examen ct
                    WHERE NOT 
                    EXISTS (
                    SELECT * 
                    FROM examen e
                    WHERE ct.type_examen_id = e.typeexamen_id
                    AND ct.consultation_id = e.consultation_id
                    )");

        $statement->execute();
        $lesconsult = $statement->fetchAll();


        $groupconsult = [];
        foreach ($lesconsult as $item) {
            $cons = $item['consultation_id'];
            $statement2 = $cnx->prepare("
                    SELECT ct.consultation_id, c.numeroconsultation, ct.type_examen_id, p.nom_patient, p.prenom_patient, te.nomTypeExamen
                    FROM consultation_type_examen ct, consultation c, patient p, type_examen te
                    WHERE ct.consultation_id =  $cons and ct.consultation_id = c.id and c.patient_id = p.id and ct.type_examen_id = te.id
                   AND NOT 
                    EXISTS (
                    SELECT * 
                    FROM examen e
                    WHERE ct.type_examen_id = e.typeexamen_id
                    AND ct.consultation_id = e.consultation_id
                    )");
//            $statement2->bindValue('item', $item['consultation_id']);
            $statement2->execute();
            $groupconsult[] = $statement2->fetchAll();
        }


        dump($groupconsult);


        return $groupconsult;
    }


    public function getlistExambyConsul($id)
    {
        $cnx = $this->_em->getConnection();
        $st1 = $cnx->prepare('
            select te.prix, te.id
            from consultation_type_examen  cte, type_examen te
            WHERE consultation_id =  :id
            AND cte.type_examen_id = te.id
        ');
        $st1->bindValue('id', $id);
        $st1->execute();
        $list = $st1->fetchAll();
        return $list;

    }

    /**
     * @param $idconsult
     * @param $idte
     * @param $prix
     * @return bool
     * @throws \Doctrine\DBAL\DBALException
     */
    public function approuverExam($idconsult, $idte, $prix)
    {

        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare('
            UPDATE consultation_type_examen 
            SET actif = true, prix = :prix
            WHERE consultation_id = :idconsult AND type_examen_id = :idte
        ');

        $statement->bindValue('idconsult', $idconsult);
        $statement->bindValue('idte', $idte);
        $statement->bindValue('prix', $prix);
        return $statement->execute();
    }

    public function desapprouverExam($id)
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare('
            UPDATE consultation_type_examen 
            SET actif = null
            WHERE consultation_id =  :id
        ');

        $statement->bindValue('id', $id);
        return $statement->execute();
    }

    public function getMontantExamInConsul($idconsult)
    {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare('
            SELECT SUM(cte.prix)
            FROM consultation_type_examen cte
            WHERE cte.consultation_id = :idconsult
        ');

        $statement->bindValue('idconsult', $idconsult);

        $statement->execute();
        return $statement->fetchColumn();
    }


    public function int2str($a)
    {
        $convert = explode('.', $a);
        if (isset($convert[1]) && $convert[1] != '') {
            return $this->int2str($convert[0]) . 'Dinars' . ' et ' . $this->int2str($convert[1]) . 'Centimes';
        }
        if ($a < 0) return 'moins ' . $this->int2str(-$a);
        if ($a < 17) {
            switch ($a) {
                case 0:
                    return '';
                case 1:
                    return 'un';
                case 2:
                    return 'deux';
                case 3:
                    return 'trois';
                case 4:
                    return 'quatre';
                case 5:
                    return 'cinq';
                case 6:
                    return 'six';
                case 7:
                    return 'sept';
                case 8:
                    return 'huit';
                case 9:
                    return 'neuf';
                case 10:
                    return 'dix';
                case 11:
                    return 'onze';
                case 12:
                    return 'douze';
                case 13:
                    return 'treize';
                case 14:
                    return 'quatorze';
                case 15:
                    return 'quinze';
                case 16:
                    return 'seize';
            }
        } else if ($a < 20) {
            return 'dix-' . $this->int2str($a - 10);
        } else if ($a < 100) {
            if ($a % 10 == 0) {
                switch ($a) {
                    case 20:
                        return 'vingt';
                    case 30:
                        return 'trente';
                    case 40:
                        return 'quarante';
                    case 50:
                        return 'cinquante';
                    case 60:
                        return 'soixante';
                    case 70:
                        return 'soixante-dix';
                    case 80:
                        return 'quatre-vingt';
                    case 90:
                        return 'quatre-vingt-dix';
                }
            } elseif (substr($a, -1) == 1) {
                if (((int)($a / 10) * 10) < 70) {
                    return $this->int2str((int)($a / 10) * 10) . '-et-un';
                } elseif ($a == 71) {
                    return 'soixante-et-onze';
                } elseif ($a == 81) {
                    return 'quatre-vingt-un';
                } elseif ($a == 91) {
                    return 'quatre-vingt-onze';
                }
            } elseif ($a < 70) {
                return $this->int2str($a - $a % 10) . '-' . $this->int2str($a % 10);
            } elseif ($a < 80) {
                return $this->int2str(60) . '-' . $this->int2str($a % 20);
            } else {
                return $this->int2str(80) . '-' . $this->int2str($a % 20);
            }
        } else if ($a == 100) {
            return 'cent';
        } else if ($a < 200) {
            return $this->int2str(100) . ' ' . $this->int2str($a % 100);
        } else if ($a < 1000) {
            return $this->int2str((int)($a / 100)) . ' ' . $this->int2str(100) . ' ' . $this->int2str($a % 100);
        } else if ($a == 1000) {
            return 'mille';
        } else if ($a < 2000) {
            return $this->int2str(1000) . ' ' . $this->int2str($a % 1000) . ' ';
        } else if ($a < 1000000) {
            return $this->int2str((int)($a / 1000)) . ' ' . $this->int2str(1000) . ' ' . $this->int2str($a % 1000);
        } else if ($a == 1000000) {
            return 'millions';
        } else if ($a < 2000000) {
            return $this->int2str(1000000) . ' ' . $this->int2str($a % 1000000) . ' ';
        } else if ($a < 1000000000) {
            return $this->int2str((int)($a / 1000000)) . ' ' . $this->int2str(1000000) . ' ' . $this->int2str($a % 1000000);
        }
    }
}
