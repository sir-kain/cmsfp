<?php

namespace FP\CMSBundle\Repository;

/**
 * ConsultationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsultationRepository extends \Doctrine\ORM\EntityRepository
{
    public function generateCode()
    {
//        return DB::table('orders')->where('id', DB::raw("(select max(`id`) from orders)"))->get();
        $querybuilder = $this->_em->createQueryBuilder()
            ->select('MAX(p.id)')
            ->from('FPCMSBundle:Consultation', 'p')
            ->getQuery()
            ->getSingleScalarResult();;
        if ($querybuilder == null) {
            return "C000001";
        }
        function randLetter()
        {
            $int = rand(0, 25);
            $a_z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            $rand_letter = $a_z[$int];
            return $rand_letter;
        }

        return 'C' . str_pad($querybuilder + 1, 6, "0", STR_PAD_LEFT) . '-' . randLetter();
    }

    public function verifyNbjrRepos($nbjr, $annee, $patient)
    {
        if ($nbjr != "") {
            $nbjrestant = (int)$this->jourReposRestantByPatient($annee, $patient);
            $nbjrep = (int)$nbjr;
            if ($nbjrep > $nbjrestant) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    /**
     * @param $patient_id
     * @param $annee
     * @return int
     */
    public function CanTakeRepos($nbjr, $patient_id, $annee)
    {
//      Liste des consultations avec RP dans l'annÃ©e
        $consultations = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('FPCMSBundle:Consultation', 'c')
            ->leftJoin('c.patient', 'p')
            ->where('c.debutRP >= :debut', 'c.finRP <= :fin', 'p.id = :patient_id')
            ->setParameter('debut', $annee . '-01-01')
            ->setParameter('fin', $annee . '-12-31')
            ->setParameter('patient_id', $patient_id)
            ->getQuery()
            ->getResult();

//      calcul duu nbr de jours total
        $nbjour = 0;
        foreach ($consultations as $consultation) {
            $nbjour = $nbjour + date_diff($consultation->getFinRP(), $consultation->getDebutRP())->days;
        }
//      les 6 mois en jours
        $nbjourSeuil = 183;

//      calcul du nbr de jours restant
        $nbjrestant = $nbjourSeuil - $nbjour;

        $nbjrep = (int)$nbjr;
//        dump($nbjrep);
//        dump($nbjrestant);
//        die();
        if ($nbjrep > $nbjrestant) {
            return false;
        }
        return true;
    }

    /**
     * @param Integer $patient_id
     * @return mixed
     */
    public function lastIdConsultationWithRP($patient_id)
    {
        $lastid = $this->_em->createQueryBuilder()
            ->select('Max(c.id)')
            ->from('FPCMSBundle:Consultation', 'c')
            ->leftJoin('c.patient', 'p')
            ->where('c.finRP != :fin', 'p.id = :patient_id')
            ->setParameter('fin', '')
            ->setParameter('patient_id', $patient_id)
            ->getQuery()
            ->getSingleScalarResult();


        return $lastid;
    }

    public function consultationWithLastRP($patient_id)
    {
        $id = $this->lastIdConsultationWithRP($patient_id);
        $consultationWithLastRP = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('FPCMSBundle:Consultation', 'c')
            ->where('c.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult();
        return $consultationWithLastRP;
    }

    public function nbConsultation()
    {
//        return DB::table('orders')->where('id', DB::raw("(select max(`id`) from orders)"))->get();
        $nbconsultation = $this->_em->createQueryBuilder()
            ->select('Count(c.id)')
            ->from('FPCMSBundle:Consultation', 'c')
            ->getQuery()
            ->getSingleScalarResult();

        return $nbconsultation;
    }

    /**
     * @param $medecin_id
     * @return mixed
     */
    public function nbConsultationByMedecin($medecin_id)
    {
//        return DB::table('orders')->where('id', DB::raw("(select max(`id`) from orders)"))->get();
        $nbconsultationsbymedecin = $this->_em->createQueryBuilder()
            ->select('Count(c.id)')
            ->from('FPCMSBundle:Consultation', 'c')
            ->leftJoin('c.utilisateur', 'u')
            ->where('u.id = :medecin_id')
            ->setParameter('medecin_id', $medecin_id)
            ->getQuery()
            ->getSingleScalarResult();

        return $nbconsultationsbymedecin;
    }

    public function nbPatientDuMedecin($medecin_id)
    {
        $nbpatientduMedecin = $this->_em->createQueryBuilder()
            ->select('count(distinct p.id)')
            ->from('FPCMSBundle:Consultation', 'c')
            ->leftJoin('c.utilisateur', 'u')
            ->leftJoin('c.patient', 'p')
            ->where('u.id = :medecin_id')
            ->setParameter('medecin_id', $medecin_id)
            ->getQuery()
            ->getSingleScalarResult();

        return $nbpatientduMedecin;
    }

    public function getnbConsultByPeriod()
    {
        $cnx = $this->_em->getConnection();
        $datedebut = new \DateTime('2017-12-20 00:00:00');
        $today = new \DateTime('now');
        $onewweek = new \DateTime('2017-12-20 00:00:00');
        $du = $datedebut;
        $au = $onewweek->modify('+1 week');
        $data = [];
        $i = 0;
        while ($au < $today) {
            $i = $i + 1;
            $nbconsult = $this->_em->createQueryBuilder()
                ->select('Count(c.id)')
                ->from('FPCMSBundle:Consultation', 'c')
                ->leftJoin('c.utilisateur', 'u')
                ->where('c.dateConsultation > :du')
                ->andWhere(':au > c.dateConsultation')
                ->setParameter('du', $du)
                ->setParameter('au', $au)
                ->getQuery()
                ->getSingleScalarResult();
            $object = new \stdClass();
            $object->period = $au->format('Y') . ' W' . $au->format('W');
            $object->consultation = (int)$nbconsult;
            $data[] = $object;

            $du = $du->modify('+1 week');
            $au = $au->modify('+1 week');
        }
        return $data;

    }

    public function getnbConsultByPeriodandUser($iduser)
    {
        $cnx = $this->_em->getConnection();
        $datedebut = new \DateTime('2017-12-20 00:00:00');
        $today = new \DateTime('now');
        $onewweek = new \DateTime('2017-12-20 00:00:00');
        $du = $datedebut;
        $au = $onewweek->modify('+1 week');
        $data = [];
        $i = 0;
        while ($au < $today) {
            $i = $i + 1;
            $nbconsult = $this->_em->createQueryBuilder()
                ->select('Count(c.id)')
                ->from('FPCMSBundle:Consultation', 'c')
                ->leftJoin('c.utilisateur', 'u')
                ->where('u.id = :medecin_id', 'c.dateConsultation > :du')
                ->andWhere(':au > c.dateConsultation')
                ->setParameter('medecin_id', $iduser)
                ->setParameter('du', $du)
                ->setParameter('au', $au)
                ->getQuery()
                ->getSingleScalarResult();
            $object = new \stdClass();
            $object->period = $au->format('Y') . ' W' . $au->format('W');
            $object->consultation = (int)$nbconsult;
            $data[] = $object;

            $du = $du->modify('+1 week');
            $au = $au->modify('+1 week');
        }
        return $data;

    }


    public function etatFCardiaque($fc)
    {
        if ($fc != null) {
            if ($fc > 60 && $fc < 100) {
                return 'default';
            } else {
                return 'red';
            }
        }
        return false;
    }
}
